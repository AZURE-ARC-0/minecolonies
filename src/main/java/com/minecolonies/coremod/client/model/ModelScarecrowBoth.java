// Date: 5/28/2016 10:20:40 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.minecolonies.coremod.client.model;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.model.Model;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.*;
import net.minecraft.client.model.HumanoidModel;

public class ModelScarecrowBoth extends Model
{
    //fields
    ModelPart head;
    ModelPart post;
    ModelPart leftArmPeg;
    ModelPart rightArmPeg;
    ModelPart torso;
    ModelPart rightLegPeg;
    ModelPart leftLegPeg;
    ModelPart leftArm;
    ModelPart rightArm;
    ModelPart rightLeg;
    ModelPart leftLeg;

    public ModelScarecrowBoth(final ModelPart part)
    {
        super(RenderType::entitySolid);
        head = part.getChild("head");
        post = part.getChild("post");
        leftArmPeg = part.getChild("leftArmPeg");
        rightArmPeg = part.getChild("rightArmPeg");
        torso = part.getChild("torso");
        rightLegPeg = part.getChild("rightLegPeg");
        leftLegPeg = part.getChild("leftLegPeg");
        leftArm = part.getChild("left_arm");
        rightArm = part.getChild("right_arm");
        rightLeg = part.getChild("right_leg");
        leftLeg = part.getChild("left_leg");
    }

    public static LayerDefinition createMesh()
    {
        MeshDefinition meshdefinition = HumanoidModel.createMesh(CubeDeformation.NONE, 0.0F);
        PartDefinition partDefinition = meshdefinition.getRoot();

        PartDefinition headDefinition = partDefinition.addOrReplaceChild("head",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, -1F));

        PartDefinition postDefinition = partDefinition.addOrReplaceChild("post",
          CubeListBuilder.create()
          , PartPose.offset(0F, 24F, 0F));

        PartDefinition leftArmPegDefinition = partDefinition.addOrReplaceChild("leftArmPeg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition rightArmPegDefinition = partDefinition.addOrReplaceChild("rightArmPeg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition torsoDefinition = partDefinition.addOrReplaceChild("torso",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition rightLegPegDefinition = partDefinition.addOrReplaceChild("rightLegPeg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition leftLegPegDefinition = partDefinition.addOrReplaceChild("leftLegPeg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition leftArmDefinition = partDefinition.addOrReplaceChild("left_arm",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition rightArmDefinition = partDefinition.addOrReplaceChild("right_arm",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition rightLegDefinition = partDefinition.addOrReplaceChild("right_leg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        PartDefinition leftLegDefinition = partDefinition.addOrReplaceChild("left_leg",
          CubeListBuilder.create()
          , PartPose.offset(7F, 24F, 0F));

        return LayerDefinition.create(meshdefinition,  128,  64 );
    }

    @Override
    public void renderToBuffer(
      final PoseStack stack,
      final VertexConsumer iVertexBuilder,
      final int p_225598_3_,
      final int p_225598_4_,
      final float p_225598_5_,
      final float p_225598_6_,
      final float p_225598_7_,
      final float p_225598_8_)
    {
        head.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        post.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        leftArmPeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        rightArmPeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        torso.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        rightLegPeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        leftLegPeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        leftArm.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        rightArm.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        rightLeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
        leftLeg.render(stack, iVertexBuilder, p_225598_3_, p_225598_4_);
    }
}
